////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2015 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file Renderer2D.hpp
 * \brief Class for the renderer 2D of the graphics engine.
 * \author Anthony Acroute
 * \version 0.1
 * \date 2015
 *
 */

#ifndef RENDERER2D_HPP
#define RENDERER2D_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Game/includes.hpp>
#include <Game/GameEngine/RenderTargets/RenderWindow.hpp>
#include "RenderList2D.hpp"

////////////////////////////////////////////////////////////
/// \brief Class for initialising and manage the 2D objects and 2D rendering.
///
////////////////////////////////////////////////////////////
class Renderer2D {

    ////////////////////////////////////////////////////////////
    // Enumeration
    ////////////////////////////////////////////////////////////
    enum Error {
      NONE,
      UNCONSTRUCTED_OBJECT,
      OVERFLOWED_OBJECT
    };

  private :
    ////////////////////////////////////////////////////////////
    // Types
    ////////////////////////////////////////////////////////////
    typedef std::pair<GLuint,
        RenderList2D::Ptr>  Pair;               ///< std::pair of render list pointers.

  protected :
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    std::map<GLuint,
        RenderList2D::Ptr>  m_mRenderLists;     ///< Index of render list pointers.
    GLuint                  m_uiIdAccumulator;  ///< Greater identifier generated since the begin
    GLuint                  m_uiError;          ///< Error value if an error arose.

  public :
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines the renderer 2D.
    ///
    ////////////////////////////////////////////////////////////
    Renderer2D          ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the renderer 2D.
    ///
    ////////////////////////////////////////////////////////////
    virtual ~Renderer2D ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Initialize all the composants of the renderer 2D.
    ///
    /// \return True if initializing succeeded, false if it failed.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean Initialize ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Create a render list and return its identifier.
    ///
    /// \return Identifier of the render list.
    ///
    ////////////////////////////////////////////////////////////
    GLuint CreateRenderList ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Erase a render list.
    ///
    /// \param uiRenderListID   Identifier of the render list.
    ///
    ////////////////////////////////////////////////////////////
    void Erase ( GLuint uiRenderListID );

    ////////////////////////////////////////////////////////////
    /// \brief Render the content of the list.
    ///
    ////////////////////////////////////////////////////////////
    void Render ( GLuint uiRenderListID, gm::RenderWindow& gmRenderWindow );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Get if the list is empty.
    ///
    /// \return True if the list is empty, false else.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean IsEmpty ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the identified render list.
    ///
    /// \param uiRenderListID   Identifier of the render list.
    ///
    /// \return Instance of the indentified render list.
    ///
    ////////////////////////////////////////////////////////////
    RenderList2D& GetRenderList ( GLuint uiRenderListID );

    ////////////////////////////////////////////////////////////
    /// \brief Get the value of an error.
    ///
    /// \return Value of an error.
    ///
    ////////////////////////////////////////////////////////////
    GLuint CheckError ( void );

  private :
    ////////////////////////////////////////////////////////////
    // Internal methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Check what type of error arose.
    ///
    /// \param uiRenderListID   Identifier which make an error.
    ///
    ////////////////////////////////////////////////////////////
    void CheckIDError ( GLuint uiRenderListID );

};

#endif // RENDERER2D_HPP
