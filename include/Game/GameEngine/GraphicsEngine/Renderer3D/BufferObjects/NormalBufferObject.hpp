////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2011-2016 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file NormalBufferObject.hpp
 * \brief Class to define a VBO.
 * \author Anthony Acroute
 * \version 0.5
 * \date 2013-2016
 *
 */

#ifndef NORMALBUFFEROBJECT_HPP__
#define NORMALBUFFEROBJECT_HPP__

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Game/includes.hpp>
#include <Game/GameEngine/GraphicsEngine/Renderer3D/BufferObjects/NormalArray.hpp>

////////////////////////////////////////////////////////////
/// \brief Class to define the normal of the VBOs.
///
////////////////////////////////////////////////////////////
class NormalBufferObject {

  protected :
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    NormalArray         m_oNormales;

  public:
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines a VBO.
    ///
    /// \param fNormalDatasArray      Normal datas array.
    ///        iNormalDatasArraySize  Size of the normal datas array.
    ///
    ////////////////////////////////////////////////////////////
    NormalBufferObject ( GLfloat* fNormalDatasArray, GLsizei iNormalDatasArraySize );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the VBO.
    ///
    ////////////////////////////////////////////////////////////
    virtual ~NormalBufferObject ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Generate the OpenGL buffers.
    ///
    /// \param  bCloseBinding  Automatic close binding, or not.
    ///
    /// \return If the function succeed or not.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean GenBuffers ( GLboolean bCloseBinding = GL_TRUE );

    ////////////////////////////////////////////////////////////
    /// \brief Send the VBO datas to the graphic card.
    ///
    /// \param  bCloseBinding  Automatic close binding, or not.
    ///
    /// \return If the function succeed or not.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean SendDatas ( GLboolean bCloseBinding = GL_TRUE );

    ////////////////////////////////////////////////////////////
    /// \brief Delete the OpenGL buffers.
    ///
    ////////////////////////////////////////////////////////////
    void DeleteBuffers ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Delete the VBO datas.
    ///
    ////////////////////////////////////////////////////////////
    void DeleteDatas ( void );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Get the length of the normal of the VBO.
    ///
    /// \return The length of the normal of the VBO.
    ///
    ////////////////////////////////////////////////////////////
    GLsizei GetNormalDatasLength ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the normal datas array size of the VBO.
    ///
    /// \return The normal datas array size of the VBO.
    ///
    ////////////////////////////////////////////////////////////
    GLsizei GetNormalDatasSize ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the normal step of the VBO.
    ///
    /// \return The normal step of the VBO.
    ///
    ////////////////////////////////////////////////////////////
    GLint GetNormalStep ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the normal datas array of the VBO.
    ///
    /// \return The normal datas array of the VBO.
    ///
    ////////////////////////////////////////////////////////////
    const GLfloat* GetNormalDatas ( void );

    ////////////////////////////////////////////////////////////
    // Internal methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Active the normal pointer of OpenGL.
    ///
    /// \return True if activation succeeded, false if it failed.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean ActiveNormalesPointer ( void );
};

#endif // NORMALBUFFEROBJECT_HPP__
