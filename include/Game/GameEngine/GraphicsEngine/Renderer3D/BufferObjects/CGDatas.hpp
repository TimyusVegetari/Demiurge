////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2011-2016 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file CGDatas.hpp
 * \brief Class to define datas for VBOs.
 * \author Anthony Acroute
 * \version 0.3
 * \date 2014-2016
 *
 */

#ifndef CGDATAS_HPP__
#define CGDATAS_HPP__

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Game/includes.hpp>

////////////////////////////////////////////////////////////
/// \brief Class to store and manipulate the datas of the VBOs.
///
////////////////////////////////////////////////////////////
template <typename T>
class CGDatas {

  protected :
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    GLuint  m_uiBufferID;
    T*      m_tDatasArray;
    GLsizei m_iDatasArraySize;
    GLint   m_iStep;
    GLenum  m_eTarget;

  public :
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines a CGDatas.
    ///
    /// \param iStep    Number of subdatas by datas
    ///                 (ex. Vertex (X,Y,Z) : iStep=3 for 3 floats).
    ///        eTarget  OpenGL buffer target (ex. GL_ARRAY_BUFFER).
    ///
    ////////////////////////////////////////////////////////////
    CGDatas ( GLint iStep, GLenum eTarget );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the CGDatas.
    ///
    ////////////////////////////////////////////////////////////
    virtual ~CGDatas ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Generate and store an OpenGL buffer identifier.
    ///
    /// \return True if generation succeeded, false if it failed.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean GenBufferID ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Bind the OpenGL buffer.
    ///
    /// \return True if binding succeeded, false if it failed.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean BindBuffer ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Set the datas of the buffer object.
    ///
    /// \param tDatasArray      Datas Array.
    ///        iDatasArraySize  Size of the datas array.
    ///
    ////////////////////////////////////////////////////////////
    void SetDatas ( T* tDatasArray, GLsizei iDatasArraySize );

    ////////////////////////////////////////////////////////////
    /// \brief Send the datas to the OpenGL buffer.
    ///
    /// \return True if sending succeeded, false if it failed.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean SendDatas ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Delete the datas array of the memory.
    ///
    ////////////////////////////////////////////////////////////
    void DeleteDatas ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Delete the OpenGL buffer.
    ///
    ////////////////////////////////////////////////////////////
    void DeleteBuffer ( void );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Get the OpenGL buffer identifier.
    ///
    /// \return The OpenGL buffer identifier.
    ///
    ////////////////////////////////////////////////////////////
    GLuint GetBufferID ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the datas array size.
    ///
    /// \return Datas array size.
    ///
    ////////////////////////////////////////////////////////////
    GLsizei GetDatasLength ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the datas array.
    ///
    /// \return Datas array.
    ///
    ////////////////////////////////////////////////////////////
    const T* GetDatas ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the size of datas.
    ///
    /// \return Size of datas in a step.
    ///
    ////////////////////////////////////////////////////////////
    GLsizei GetDatasSize ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the number of subdatas.
    ///
    /// \return Number of subdatas.
    ///
    ////////////////////////////////////////////////////////////
    GLint GetStep ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the OpenGL buffer target.
    ///
    /// \return Target of the OpenGL buffer.
    ///
    ////////////////////////////////////////////////////////////
    GLenum GetTarget ( void );
};

#include "CGDatas.inl"

#endif // CGDATAS_HPP__
