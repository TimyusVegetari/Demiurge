////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2011-2016 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file CameraManager.hpp
 * \brief Class to manage 3D cameras.
 * \author Anthony Acroute
 * \version 0.2
 * \date 2015-2016
 *
 */

#ifndef CAMERAMANAGER_HPP
#define CAMERAMANAGER_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Camera.hpp"
#include <map>

////////////////////////////////////////////////////////////
/// \brief Class to manage cameras for 3D world.
///
////////////////////////////////////////////////////////////
class CameraManager {

    ////////////////////////////////////////////////////////////
    // Enumeration
    ////////////////////////////////////////////////////////////
    enum Error {
      NONE,
      UNCONSTRUCTED_OBJECT,
      OVERFLOWED_OBJECT
    };

  private :
    ////////////////////////////////////////////////////////////
    // Types
    ////////////////////////////////////////////////////////////
    typedef std::pair<GLuint, Camera::Ptr> Pair;  ///< std::pair of listed camera pointers.

  protected :
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    std::map<GLuint,
        Camera::Ptr>  m_mIndex;   ///< Index of cameras pointers.
    GLuint m_uiIdAccumulator;     ///< Greater identifier generated since the begin
    GLuint m_uiError;             ///< Error value if an error arose.
    GLuint m_uiActivatedCameraID; ///< Identifier of the activated camera.

  public :
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines the camera manager.
    ///
    ////////////////////////////////////////////////////////////
    CameraManager          ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the camera manager.
    ///
    ////////////////////////////////////////////////////////////
    virtual ~CameraManager ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Create a camera and return its identifier.
    ///
    /// \return Identifier of the camera.
    ///
    ////////////////////////////////////////////////////////////
    GLuint CreateCamera ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Erase a camera.
    ///
    /// \param uiCameraID   Identifier of the camera.
    ///
    ////////////////////////////////////////////////////////////
    void Erase ( GLuint uiCameraID );

    ////////////////////////////////////////////////////////////
    /// \brief Activate the identified camera to render.
    ///
    /// \param uiCameraID   Identifier of the camera.
    ///
    ////////////////////////////////////////////////////////////
    void EnableCamera ( GLuint uiCameraID );

    ////////////////////////////////////////////////////////////
    /// \brief Deactivate the identified camera after rendering.
    ///
    ////////////////////////////////////////////////////////////
    void DisableCamera ( void );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Get if the list is empty.
    ///
    /// \return True if the list is empty, false else.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean IsEmpty ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the identified camera.
    ///
    /// \param uiCameraID   Identifier of the camera.
    ///
    /// \return Instance of the identified camera.
    ///
    ////////////////////////////////////////////////////////////
    Camera& GetCamera ( GLuint uiCameraID );

    ////////////////////////////////////////////////////////////
    /// \brief Get the activated camera.
    ///
    /// \return Instance of the activated camera.
    ///
    ////////////////////////////////////////////////////////////
    Camera& GetCamera ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the value of an error.
    ///
    /// \return Value of an error.
    ///
    ////////////////////////////////////////////////////////////
    GLuint CheckError ( void );

  private :
    ////////////////////////////////////////////////////////////
    // Internal methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Check what type of error arose.
    ///
    /// \param uiCameraID   Identifier which make an error.
    ///
    ////////////////////////////////////////////////////////////
    void CheckIDError ( GLuint uiCameraID );
};

#endif // CAMERAMANAGER_HPP
