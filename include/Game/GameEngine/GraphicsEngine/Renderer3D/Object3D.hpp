////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2011-2015 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file Object3D.hpp
 * \brief Class for the 3D objects.
 * \author Anthony Acroute
 * \version 0.3
 * \date 2015
 *
 */

#ifndef OBJECT3D_HPP__
#define OBJECT3D_HPP__

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Game/includes.hpp>
#include <list>

////////////////////////////////////////////////////////////
/// \brief Enumeration of types for the 3D objects.
///
////////////////////////////////////////////////////////////
namespace Objects3D {

enum Type {
  None,
  Skybox,
  Box,
  Count
};

}

class RenderList3D;

////////////////////////////////////////////////////////////
/// \brief Class to create 3D objects like as skybox, box,
/// sphere, block, etc...
///
////////////////////////////////////////////////////////////
class Object3D {
  friend Renderer3D;

  public :
    ////////////////////////////////////////////////////////////
    // Types
    ////////////////////////////////////////////////////////////
    typedef std::unique_ptr<Object3D> Ptr;  ///< Unique pointer of 3D object.

  protected :
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    std::list<GLuint>::iterator m_lRenderListIter;  ///< Iterator to the identifier in the render list.

  public :
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines a 3D object.
    ///
    ////////////////////////////////////////////////////////////
    Object3D ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the 3D object.
    ///
    ////////////////////////////////////////////////////////////
    virtual ~Object3D ( void );
};

#endif // OBJECT3D_HPP__
