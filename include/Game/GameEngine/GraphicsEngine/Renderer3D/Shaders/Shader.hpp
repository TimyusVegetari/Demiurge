////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2015 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file Shader.hpp
 * \brief Class to define a shader.
 * \author Anthony Acroute
 * \version 0.2
 * \date 2013-2015
 *
 */

#ifndef SHADER_HPP__
#define SHADER_HPP__

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <GL/glew.h>
#include <string>
#include <Game/GameEngine/File/File.hpp>

////////////////////////////////////////////////////////////
/// \brief Class to load and store a shader for vertex or fragment.
///
////////////////////////////////////////////////////////////
class Shader {

  private:
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    GLuint      m_uiID;
    GLenum      m_eType;

  public:
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines a shader.
    ///
    ////////////////////////////////////////////////////////////
    Shader ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the shader.
    ///
    ////////////////////////////////////////////////////////////
    ~Shader ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Load a shader for vertex, fragment, or another type.
    ///
    /// \param eType        Type of the shader (vertex, fragment).
    ///        szFileName   The adress of the file to open.
    ///
    /// \return True if the file have been open, false else.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean Load ( const GLenum eType, const std::string szFileName );

    ////////////////////////////////////////////////////////////
    /// \brief Delete the shader.
    ///
    ////////////////////////////////////////////////////////////
    void Delete ( void );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Get the shader identifier.
    ///
    /// \return The shader identifier.
    ///
    ////////////////////////////////////////////////////////////
    GLuint GetID ( void );

  private:
    ////////////////////////////////////////////////////////////
    // Internal methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Check if the shader is correctly compiled.
    ///
    /// \return True if the compilation succeed, false else.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean CheckCompilation ( void );
};

#endif // SHADER_HPP__
