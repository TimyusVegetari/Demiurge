////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2015 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file ShaderProgram.hpp
 * \brief Class to define a shader program.
 * \author Anthony Acroute
 * \version 0.2
 * \date 2013-2015
 *
 */

#ifndef SHADERPROGRAM_HPP__
#define SHADERPROGRAM_HPP__

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Game/GameEngine/GraphicsEngine/Renderer3D/Shaders/Shader.hpp>
#include <Game/GameEngine/GraphicsEngine/Renderer3D/Shaders/ShaderIdentifiers.hpp>
#include <glm/mat4x4.hpp>       // glm::mat4
#include <glm/gtc/type_ptr.hpp> // glm::value_ptr

////////////////////////////////////////////////////////////
/// \brief Class to create a shader program.
///
////////////////////////////////////////////////////////////
class ShaderProgram {

  private:
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    Shader      m_gVertexShader;
    Shader      m_gFragmentShader;
    GLuint      m_uiID;

  public:
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines a shader program.
    ///
    ////////////////////////////////////////////////////////////
    ShaderProgram ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the shader program.
    ///
    ////////////////////////////////////////////////////////////
    ~ShaderProgram ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Load the shader program.
    ///
    /// \param szVertexName     The adress of the vertex shader file.
    ///        szFragmentName   The adress of the fragment shader file.
    ///
    /// \return True if the file have been open, false else.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean Load ( const std::string szVertexName, const std::string szFragmentName );

    ////////////////////////////////////////////////////////////
    /// \brief Use the shader program.
    ///
    ////////////////////////////////////////////////////////////
    void EnableShaderProgram ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Unuse the shader program.
    ///
    ////////////////////////////////////////////////////////////
    void DisableShaderProgram ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Send a texture.
    ///
    /// \param szName   Name of the variable in the shader.
    ///        iV0      Value of TEXTUREx in OpenGL (TEXTURE0 => 0).
    ///
    ////////////////////////////////////////////////////////////
    void SendUnitTexture ( const GLchar* szName, GLint iV0 );

    ////////////////////////////////////////////////////////////
    /// \brief Send a matrix.
    ///
    /// \param szName   Name of the variable in the shader.
    ///        m4fMVP   Matrix for the rendering.
    ///
    ////////////////////////////////////////////////////////////
    void SendCurrentMatrix ( const GLchar* szName, glm::mat4& m4fMVP );

    ////////////////////////////////////////////////////////////
    /// \brief Delete the shader program.
    ///
    ////////////////////////////////////////////////////////////
    void Delete ( void );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Get the shader program identifier.
    ///
    /// \return The shader program identifier.
    ///
    ////////////////////////////////////////////////////////////
    GLuint GetID ( void );

  private:
    ////////////////////////////////////////////////////////////
    // Internal methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Check if the shader program is correctly compiled.
    ///
    /// \return True if the compilation succeed, false else.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean CheckCompilation ( void );
};

#endif // SHADERPROGRAM_HPP__
