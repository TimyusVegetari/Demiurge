////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2015 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file Renderer3D.hpp
 * \brief Class for the renderer 3D of the graphics engine.
 * \author Anthony Acroute
 * \version 0.1
 * \date 2015
 *
 */

#ifndef RENDERER3D_HPP
#define RENDERER3D_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Game/includes.hpp>

class Renderer3D;

////////////////////////////////////////////////////////////
/// \brief Class for initialising and manage the 3D objects and 3D rendering.
///
////////////////////////////////////////////////////////////
class Renderer3D {

  protected :
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////


  public :
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines the renderer 3D.
    ///
    ////////////////////////////////////////////////////////////
    Renderer3D          ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the renderer 3D.
    ///
    ////////////////////////////////////////////////////////////
    virtual ~Renderer3D ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Initialize all the composants of the renderer 3D.
    ///
    /// \return True if initializing succeeded, false if it failed.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean Initialize ( void );

    // Draw of crosses in the 3D game space

    ////////////////////////////////////////////////////////////
    /// \brief Load a 3D cross by geometry instancing.
    ///
    ////////////////////////////////////////////////////////////
    //void LoadCrossGI ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Load a 3D cross by geometry instancing with some properties.
    ///
    /// \param v3fCenter  Position of the center of the cross in the 3D space.
    ///        v4fColor   Color of the 3D cross.
    ///
    ////////////////////////////////////////////////////////////
    //void LoadCrossGI ( drimi::Vec3f v3fCenter, drimi::Vec4f v4fColor );

    ////////////////////////////////////////////////////////////
    /// \brief Delete a 3D cross in the geometry instancing manager.
    ///
    ////////////////////////////////////////////////////////////
    //void DeleteCrossGI ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Draw the 3D crosses by geometry instancing.
    ///
    /// \param m4fMVP   MVP matrix of the local space around the cross.
    ///
    ////////////////////////////////////////////////////////////
    //void DrawCross ( drimi::Mat4x4f& m4fMVP );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////


};

#endif // RENDERER3D_HPP
