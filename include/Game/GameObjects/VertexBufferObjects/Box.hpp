////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2011-2015 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file Box.hpp
 * \brief Class to define the VBO of a box.
 * \author Anthony Acroute
 * \version 0.4
 * \date 2013-2015
 *
 */

#ifndef VBO_BOX_HPP__
#define VBO_BOX_HPP__

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Game/GameEngine/GraphicsEngine/Renderer3D/BufferObjects/VertexBufferObject.hpp>
#include <Game/GameEngine/GraphicsEngine/Renderer3D/BufferObjects/NormalBufferObject.hpp>
#include <Game/GameEngine/GraphicsEngine/Renderer3D/BufferObjects/ColorBufferObject.hpp>

////////////////////////////////////////////////////////////
/// \brief Class to define the VBO of a box.
///
////////////////////////////////////////////////////////////
class Box : public VertexBufferObject, NormalBufferObject, ColorBufferObject {

  private :
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    GLfloat m_fWidth,
            m_fHeight,
            m_fDepth;

  public:
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines a box.
    ///
    ////////////////////////////////////////////////////////////
    Box ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the box.
    ///
    ////////////////////////////////////////////////////////////
    virtual ~Box ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Initialize the VBO datas (Vertex, normale, etc...).
    ///
    ////////////////////////////////////////////////////////////
    virtual void InitializeDatas ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Initialize the VBO.
    ///
    /// \return True if initialization succeeded, false if it failed.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean InitializeVBO ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Draw all the composants of the box.
    ///
    /// \param
    ///
    ////////////////////////////////////////////////////////////
    void Draw ( GLenum eMode );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Set the dimensions of the box.
    ///
    ////////////////////////////////////////////////////////////
    void SetDimensions ( GLfloat fWidth, GLfloat fHeight, GLfloat fDepth );

    ////////////////////////////////////////////////////////////
    /// \brief Set the width of the box.
    ///
    ////////////////////////////////////////////////////////////
    void SetWidth ( GLfloat fWidth );

    ////////////////////////////////////////////////////////////
    /// \brief Set the height of the box.
    ///
    ////////////////////////////////////////////////////////////
    void SetHeight ( GLfloat fHeight );

    ////////////////////////////////////////////////////////////
    /// \brief Set the depth of the box.
    ///
    ////////////////////////////////////////////////////////////
    void SetDepth ( GLfloat fDepth );

    ////////////////////////////////////////////////////////////
    /// \brief Get the width of the box.
    ///
    /// \return Width of the box.
    ///
    ////////////////////////////////////////////////////////////
    GLfloat GetWidth ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the height of the box.
    ///
    /// \return Height of the box.
    ///
    ////////////////////////////////////////////////////////////
    GLfloat GetHeight ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the depth of the box.
    ///
    /// \return Depth of the box.
    ///
    ////////////////////////////////////////////////////////////
    GLfloat GetDepth ( void );
};

#endif // VBO_BOX_HPP__
